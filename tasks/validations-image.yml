---
## Check that we have images for each guest
## If not, download it, but only once for all VMs that have the same image
## (multiple VMs might use the same image)

- name: Validate images
  block:
    ## Create unique list of dictionaries for all images
    - name: Create dict of distro images per KVM host
      set_fact:
        virt_infra_distro_images: "{{ virt_infra_distro_images | default([]) + [{ 'image' : hostvars[item].virt_infra_distro_image, 'url': hostvars[item].virt_infra_distro_image_url, 'checksum': hostvars[item].virt_infra_distro_image_checksum, 'algorithm': hostvars[item].virt_infra_distro_image_checksum_algorithm | default('sha1') }] }}"
      when:
        - inventory_hostname in groups['kvmhost']
        - hostvars[item].inventory_hostname not in groups['kvmhost']
        - hostvars[item].kvmhost == inventory_hostname
        - hostvars[item].virt_infra_state != "undefined"
        - hostvars[item].virt_infra_distro_image_url is defined and hostvars[item].virt_infra_distro_image_url
        - hostvars[item].virt_infra_distro_image_checksum is defined and hostvars[item].virt_infra_distro_image_checksum
      with_items: "{{ play_hosts }}"

    - name: debug distro list
      debug: var=virt_infra_distro_images

    - name: debug distro list
      debug: var=item
      when:
        - inventory_hostname in groups['kvmhost']
      with_items: "{{ virt_infra_distro_images | unique }}"

    - name: debug distro list
      debug:
        msg: "{{ virt_infra_distro_images | sort(attribute='image') |first }}"
      when:
        - inventory_hostname in groups['kvmhost']

    - meta: pause

    - name: "KVM host: Test for distro images"
      stat:
        path: "{{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ virt_infra_distro_image }}"
      register: result_base_image
      delegate_to: "{{ kvmhost }}"
      become: true
      when:
        - inventory_hostname not in groups['kvmhost']
        - virt_infra_state != "undefined"

    - name: Create temporary dir to download distro image
      tempfile:
        path: "{{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}"
        state: directory
        suffix: distro
      register: result_distrodir
      become: true
      when:
        - inventory_hostname not in groups['kvmhost']
        - virt_infra_state != "undefined"
      delegate_to: "{{ kvmhost }}"

    ## Download the image if required variables exist
    ## ** DO NOT USE checksum HERE ** (we will do checksums separately)
    ## If the checksum changes down the track it will delete images that don't match
    ## That will be catastrophic for existing guests using it as a backing image
    - name: "Guests: Download distro disk image to KVM host"
      get_url:
        url: "{{ virt_infra_distro_image_url }}"
        dest: "{{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ virt_infra_distro_image }}"
        owner: "{{ hostvars[kvmhost].virt_infra_host_image_owner | default('root') }}"
        group: "{{ hostvars[kvmhost].virt_infra_host_image_group | default('qemu') }}"
        mode: "{{ hostvars[kvmhost].virt_infra_host_image_mode | default('0660') }}"
#        seuser: system_u
#        serole: object_r
#        setype: svirt_image_t
      register: result_image_download
      retries: 3
      delay: 5
      delegate_to: "{{ kvmhost }}"
      until: result_image_download is succeeded
      when:
        - inventory_hostname not in groups['kvmhost']
        - virt_infra_state != "undefined"
        - not result_base_image.stat.exists
        - virt_infra_distro_image_url is defined and virt_infra_distro_image_url
        - virt_infra_distro_image_checksum is defined and virt_infra_distro_image_checksum
      ignore_errors: true
      changed_when: false
      become: true

    - name: debug
      debug: var=result_image_download

    # Check the checksum of the file

    # Move the file in place if success

    # Delete the file if failed

    - name: "Guests: Check that distro disk image exists on KVM host"
      set_fact:
        validations_failed: "{{ validations_failed|default([]) + \
        [ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) + '/' + \
        virt_infra_distro_image + ' missing.{% if virt_infra_distro_image_url is defined and virt_infra_distro_image_url %} \
        Download from {{ virt_infra_distro_image_url }}{% endif %}'] }}"
      when:
        - inventory_hostname not in groups['kvmhost']
        - not result_base_image.stat.exists
        - result_image_download is not defined or (result_image_download is defined and result_image_download.failed)
      changed_when: true

    - name: Validation failures
      debug:
        msg: "{{ validations_failed|default('nothing') }}"
      when:
        - validations_failed is defined and validations_failed
      failed_when: true

  rescue:
    - debug:
        msg: "Play aborted, see errors above"
      changed_when: true

    - meta: end_play
- meta: pause
